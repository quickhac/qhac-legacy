ClassGrade:
	String due_date
	String note
	int pts_earned
	int pts_possible

ClassGradeCategory:
	int percent
	ClassGrade[] grades

function cgrades_to_json(html) {
	var myObj = {
		"title": $("h3.className", html).text(),
		"currAvg": /(\d*)/.exec($("p.currentAverage", html).text())[1],
		"cats": []
	};

	var categoryPattern = /^(.*) - (\d*)%$/;

	var categories = $(".CategoryName", html);
	var gradeTables = $("table", html);

	// in caes of array length mismatch, ignore unmatched array elements
	var len = Math.min(categories.length, gradeTables.length);

	// for each grade category
	for (var i = 0; i < len; i++) {
		var captures = categoryPattern.exec(categories[i].innerText);

		// category name
		myObj.cats[i] = {"title": captures[1], "percent": captures[2]};

		// grades
		myObj.cats[i].grades = [];
		var gradeList = gradeTables[i].find("tr.DataRow, tr.DataRowAlt");
		for (var j = 0; j < gradeList.length; j++) {
			// get data
			var dueDateElem   = gradeList[j].children(".DueDate");
			var dueDate       = new Date(dueDateElem.innerText());
			var noteElem      = gradeList[j].children(".AssignmentNote");
			var note          = noteElem.innerText();
			var ptsEarnedElem = gradeList[j].children(".AssignmentGrade");
			var ptsEarned     = parseInt(ptsEarnedElem.innerText());
			var ptsPossElem   = gradeList[j].children(".AssignmentPointsPossible");
			if (ptsPossElem == null)
				ptsPoss = 100;
			else
				ptsPoss = parseInt(ptsPossElem.innerText());

			myObj.cats[i].grades[j] = {
				"dueDate": dueDate,
				"note": note,
				"ptsEarned": ptsEarned,
				"ptsPoss": ptsPoss
			};
		}
	}

	return myObj;
}
			

function cgrades_json_to_html(json) : DocumentFragment {
	var root = document.createDocumentFragment();

	// class title
	var title = document.createElement("h3");
	$(title).addClass("ClassName");
}